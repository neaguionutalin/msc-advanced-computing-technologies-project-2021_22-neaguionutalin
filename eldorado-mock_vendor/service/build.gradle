plugins {
    id "org.springframework.boot" version "2.4.2"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.github.eirnym.js2p" version "1.0"
    id "com.gorylenko.gradle-git-properties" version "2.2.3"
}

description = 'service'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    implementation libs.spring_open_api
    implementation libs.springboot_web_starter
    implementation libs.springboot_actuator
    implementation libs.springboot_starter_data_jpa
    implementation libs.springboot_starter_validation

    implementation libs.camel_spring_boot_starter
    implementation libs.camel_activemq_starter
    implementation libs.camel_spring_boot_open_tracing

    implementation libs.liquibase_core
    implementation libs.mysql_connector
    implementation libs.logback_logstash

    compileOnly libs.lombok
    implementation libs.micrometer_registry_elastic
    annotationProcessor libs.lombok
    implementation libs.javax_valdiation_api
    implementation libs.jackson_jsr310
    implementation libs.elastic_apm_agent_attacher
    implementation libs.hibernate_ehcache
    implementation project(':REST_model').sourceSets.main.output
    implementation project(':repository')

    // ******club test libs together*********
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    def withoutJunitVintage = {
        exclude group: 'org.juniItt.vintage', module: 'junit-vintage-engine'
    }
    testImplementation test_libs.mockito_core
    testImplementation test_libs.springboot_starter_test, withoutJunitVintage
    testImplementation test_libs.assertJ_core
    testImplementation test_libs.camel_test_spring
}

jsonSchema2Pojo {
    source = files("${project.projectDir}/src/main/resources/json_schemas")
    targetVersion = "17"
    includeJsr303Annotations = true
    propertyWordDelimiters = ['_'] as char[]
    annotationStyle = 'jackson2'
    generateBuilders = true
    useBigDecimals = true
    dateTimeType = 'java.time.OffsetDateTime'
}

bootRun {
    systemProperties = System.properties
}

task localBootRun {
    bootRun {
        systemProperty "spring.profiles.active", "local"
    }
}
localBootRun.finalizedBy bootRun

test {
    useJUnitPlatform()
    jacoco {
        excludes += []
    }
}